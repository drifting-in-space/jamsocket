extern crate proc_macro;
use proc_macro::TokenStream;
use quote::quote;
use syn::{ItemFn, ReturnType};

#[allow(clippy::too_many_lines)]
fn stateroom_wasm_impl(item: &proc_macro2::TokenStream) -> proc_macro2::TokenStream {
    let func: ItemFn =
        syn::parse2(item.clone()).expect("#[stateroom_wasm] should annotate a function.");

    if &func.sig.ident.to_string() != "run" {
        panic!("#[stateroom_wasm] should annotate a function called `run`.");
    }

    if func.sig.asyncness.is_none() {
        panic!("#[stateroom_wasm] should annotate an async funciton.");
    }

    if let ReturnType::Default = func.sig.output {
    } else {
        panic!("The function wrapped by #[stateroom_wasm] should not have a return type.");
    }

    let inputs: Vec<_> = func.sig.inputs.iter().collect();
    if inputs.len() != 1 {
        panic!("The function wrapped by #[stateroom_wasm] should have exactly one argument (a StateroomContext.)");
    }

    let inputs = func.sig.inputs;
    let block = func.block;

    quote! {
        mod _stateroom_wasm_macro_autogenerated {
            // extern crate alloc;

            use super::*;
            use stateroom_wasm::prelude::{Stateroom, StateroomContext, GlobalStateroomContext, ROOM_FUTURE, RoomEvent, MessagePayload, MessageRecipient, initialize_room};
            use std::pin::Pin;
            use std::boxed::Box;
            use std::future::Future;

            #[derive(Default)]
            struct StateroomService;

            impl Stateroom for StateroomService {
                fn run<'async_trait, C>(self, #inputs) -> Pin<Box<dyn Future<Output = ()> + Send + 'async_trait>> where
                    C: 'async_trait + StateroomContext,
                    Self: 'async_trait
                {
                    Box::pin(async move {
                        #block
                    })
                }
            }

            #[no_mangle]
            extern "C" fn initialize() {
                initialize_room::<StateroomService>();
            }
        }
    }
}

/// Exposes a `stateroom_wasm::SimpleStateroomService`-implementing trait as a WebAssembly module.
#[proc_macro_attribute]
pub fn stateroom_wasm(_attr: TokenStream, item: TokenStream) -> TokenStream {
    #[allow(clippy::needless_borrow)]
    stateroom_wasm_impl(&item.into()).into()
}
